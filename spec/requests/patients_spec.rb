require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/patients', type: :request do
  let(:valid_attributes) do
    {
      first_name: 'Daniel',
      last_name: 'Ochuba',
      age: '23',
      address: 'UK'
    }
  end

  let(:invalid_attributes) do
    {
      first_name: '',
      last_name: nil,
      age: nil,
      address: ''
    }
  end

  describe 'GET /index' do
    it 'renders a list of patients' do
      Patient.create!(valid_attributes)
      get patients_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'displays a patient details page' do
      patient = Patient.create!(valid_attributes)
      get patient_url(patient)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders the new patient form' do
      get new_patient_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders the edit patient form' do
      patient = Patient.create!(valid_attributes)
      get edit_patient_url(patient)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new patient record' do
        expect do
          post patients_url, params: { patient: valid_attributes }
        end.to change(Patient, :count).by(1)
      end

      it 'redirects to the newly created patient details page' do
        post patients_url, params: { patient: valid_attributes }
        expect(response).to redirect_to(patient_url(Patient.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new patient record' do
        expect do
          post patients_url, params: { patient: invalid_attributes }
        end.to_not change(Patient, :count)
      end

      it 'renders the new patient form with validation errors' do
        post patients_url, params: { patient: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    let(:new_attributes) do
      {
        first_name: 'Henry',
        last_name: 'Phill',
        age: '30',
        address: 'Abuja Nigeria'
      }
    end

    context 'with valid parameters' do
      it 'updates an existing patient record' do
        patient = Patient.create!(valid_attributes)
        patch patient_url(patient), params: { patient: new_attributes }
        patient.reload
        expect(patient.attributes.symbolize_keys).to include(new_attributes)
      end

      it 'redirects to the updated patient details page' do
        patient = Patient.create!(valid_attributes)
        patch patient_url(patient), params: { patient: new_attributes }
        expect(response).to redirect_to(patient_url(patient))
      end
    end

    context 'with invalid parameters' do
      it 'does not update the patient record' do
        patient = Patient.create!(valid_attributes)
        patch patient_url(patient), params: { patient: invalid_attributes }
        patient.reload
        expect(patient.attributes.symbolize_keys).to include(valid_attributes)
      end

      it 'renders the edit patient form with validation errors' do
        patient = Patient.create!(valid_attributes)
        patch patient_url(patient), params: { patient: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'removes a patient record' do
      patient = Patient.create!(valid_attributes)
      expect do
        delete patient_url(patient)
      end.to change(Patient, :count).by(-1)
    end

    it 'redirects to the patients index page' do
      patient = Patient.create!(valid_attributes)
      delete patient_url(patient)
      expect(response).to redirect_to(patients_url)
    end
  end
end
