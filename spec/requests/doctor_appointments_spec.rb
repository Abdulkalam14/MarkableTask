require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/doctor_appointments', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # DoctorAppointment. As you add validations to DoctorAppointment, be sure to
  # adjust the attributes here as well.
  let(:doctor) { User.create!(email: 'doctor@example.com', password: 'password', role: 'doctor', first_name: 'John', last_name: 'Doe') }
  let(:patient) { Patient.create!(first_name: 'Jane', last_name: 'Doe', age: '25', address: 'UK') }

  let(:valid_attributes) do
    {
      user_id: doctor.id,
      patient_id: patient.id,
      illness: 'illness',
      date: Date.today
    }
  end

  let(:invalid_attributes) do
    {
      user_id: nil,
      patient_id: nil,
      illness: '',
      date: nil
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      DoctorAppointment.create! valid_attributes
      get doctor_appointments_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      doctor_appointment = DoctorAppointment.create! valid_attributes
      get doctor_appointment_url(doctor_appointment)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_doctor_appointment_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      doctor_appointment = DoctorAppointment.create! valid_attributes
      get edit_doctor_appointment_url(doctor_appointment)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new DoctorAppointment' do
        expect do
          post doctor_appointments_url, params: { doctor_appointment: valid_attributes }
        end.to change(DoctorAppointment, :count).by(1)
      end

      it 'redirects to the created doctor_appointment' do
        post doctor_appointments_url, params: { doctor_appointment: valid_attributes }
        expect(response).to redirect_to(doctor_appointment_url(DoctorAppointment.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new DoctorAppointment' do
        expect do
          post doctor_appointments_url, params: { doctor_appointment: invalid_attributes }
        end.to change(DoctorAppointment, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post doctor_appointments_url, params: { doctor_appointment: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:doctor) { User.create!(email: 'doctor@example.com', password: 'password', role: 'doctor', first_name: 'Theo', last_name: 'Doe') }
      let(:patient) { Patient.create!(first_name: 'Jane', last_name: 'Doe', age: '25', address: 'UK') }

      let(:new_attributes) do
        {
          user_id: doctor.id,
          patient_id: patient.id,
          illness: 'Malaria',
          date: Date.today
        }
      end

      it 'updates the requested doctor_appointment' do
        doctor_appointment = DoctorAppointment.create! valid_attributes
        patch doctor_appointment_url(doctor_appointment), params: { doctor_appointment: new_attributes }
        doctor_appointment.reload
        expect(response).to have_http_status(:found)
      end

      it 'redirects to the doctor_appointment' do
        doctor_appointment = DoctorAppointment.create! valid_attributes
        patch doctor_appointment_url(doctor_appointment), params: { doctor_appointment: new_attributes }
        doctor_appointment.reload
        expect(response).to redirect_to(doctor_appointment_url(doctor_appointment))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        doctor_appointment = DoctorAppointment.create! valid_attributes
        patch doctor_appointment_url(doctor_appointment), params: { doctor_appointment: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested doctor_appointment' do
      doctor_appointment = DoctorAppointment.create! valid_attributes
      expect do
        delete doctor_appointment_url(doctor_appointment)
      end.to change(DoctorAppointment, :count).by(-1)
    end

    it 'redirects to the doctor_appointments list' do
      doctor_appointment = DoctorAppointment.create! valid_attributes
      delete doctor_appointment_url(doctor_appointment)
      expect(response).to redirect_to(doctor_appointments_url)
    end
  end
end
